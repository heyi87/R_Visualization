X<-c(1,.6324,.6324,1)
X=matrix(X, ncol=2)
eigen(X)
1.63224/(1.63224+0.3676)
0.707*1.632**2
-0.707*0.3676**2
Y=c(2,0,0,0,4,0,0,0,4)
Y=matrix(Y, ncol=3)
eigen(Y)
help(barlett.test)
help(bartlett.test)
help(princomp)
library(ggplot2)
library(ggplot2)
library(grid)
data("iris")
# Sort bubble plot so smaller colors are displayed last
# on top of the bigger colors
df <- iris
df <- df[order(df$Petal.Length, decreasing = TRUE),]
# Create bubble plot
p <- ggplot(df, aes(
x = Sepal.Length,
y = Sepal.Width,
color = Species,
size = Petal.Length))
# Give points some alpha to help with overlap/density
# Can also "jitter" to reduce overlap but reduce accuracy
p <- p + geom_point(alpha = 0.6, position = "jitter")
# Default size scale is by radius, force to scale by area instead
# Optionally disable legends
p <- p + scale_size_area(max_size = 10, guide = "none")
# p <- p + scale_color_discrete(guide = "none")
# Tweak the plot limits
p <- p + scale_x_continuous(
limits = c(3, 9),
expand = c(0, 0))
p <- p + scale_y_continuous(
limits = c(1, 5),
expand = c(0, 0))
# Make the grid square
p <- p + coord_fixed(ratio = 1)
# Modify the labels
p <- p + ggtitle("Iris Dataset")
p <- p + labs(
size = "Petal Length",
x = "Sepal Length",
y = "Sepal Width")
# Modify the legend settings
p <- p + theme(legend.title = element_blank())
p <- p + theme(legend.direction = "horizontal")
p <- p + theme(legend.position = c(0, 0))
p <- p + theme(legend.justification = c(0, 0))
p <- p + theme(legend.background = element_blank())
p <- p + theme(legend.key = element_blank())
p <- p + theme(legend.text = element_text(size = 12))
p <- p + theme(legend.margin = unit(0, "pt"))
# Force the dots to plot larger in legend
p <- p + guides(colour = guide_legend(override.aes = list(size = 8)))
# Indicate size is petal length
p <- p + annotate(
"text", x = 6, y = 4.8,
hjust = 0.5, color = "grey40",
label = "Circle area is proportional to petal length.")
print(p)
library(shiny)
shiny::runGitHub('msan622', 'manoj-v', subdir='homework2')
shiny::runGitHub('msan622', 'katherinez22', subdir = 'homework2')
shiny::runGitHub('msan622', 'katherinez22', subdir = 'homework2')
library(shiny)
shiny::runGitHub('msan622', 'manoj-v', subdir='homework2')
df <- iris
df$id <- rownames(df)
df$id
df
head(df)
rownames(df)
df$variable
levels(df$Species)  <- sapply(levels(df$Species), niceLabels)
levels(df$variable) <- sapply(levels(df$variable), niceLabels)
niceLabels <- function(text) {
text <- gsub("\\.", " ", text)
text <- paste(
toupper(substr(text, 1, 1)),
substring(text, 2),
sep = "",
collapse = "")
return(text);
}
levels(df$Species)  <- sapply(levels(df$Species), niceLabels)
levels(df$variable) <- sapply(levels(df$variable), niceLabels)
df$variable
(df$Species)
library(ggplot2)
library(grid)
data("iris")
# Sort bubble plot so smaller colors are displayed last
# on top of the bigger colors
df <- iris
df <- df[order(df$Petal.Length, decreasing = TRUE),]
p <- ggplot(df, aes(
x = Sepal.Length,
y = Sepal.Width,
color = Species,
size = Petal.Length))
p
p <- p + geom_point(alpha = 0.6, position = "jitter")
p
# SCATTERPLOT MATRIX: IRIS DATASET
# http://www.inside-r.org/packages/cran/GGally/docs/ggpairs
# Load required packages
require(GGally)
# Load datasets
data(iris)
# Create scatterplot matrix
p <- ggpairs(iris,
# Columns to include in the matrix
columns = 1:4,
# What to include above diagonal
# list(continuous = "points") to mirror
# "blank" to turn off
upper = "blank",
# What to include below diagonal
lower = list(continuous = "points"),
# What to include in the diagonal
diag = list(continuous = "density"),
# How to label inner plots
# internal, none, show
axisLabels = "none",
# Other aes() parameters
colour = "Species",
title = "Iris Scatterplot Matrix"
)
# Remove grid from plots along diagonal
for (i in 1:4) {
# Get plot out of matrix
inner = getPlot(p, i, i);
# Add any ggplot2 settings you want
inner = inner + theme(panel.grid = element_blank());
# Put it back into the matrix
p <- putPlot(p, inner, i, i);
}
# Show the plot
print(p)
require(GGally)
install.packages("GGally")
# SCATTERPLOT MATRIX: IRIS DATASET
# http://www.inside-r.org/packages/cran/GGally/docs/ggpairs
# Load required packages
library(GGally)
# Load datasets
data(iris)
# Create scatterplot matrix
p <- ggpairs(iris,
# Columns to include in the matrix
columns = 1:4,
# What to include above diagonal
# list(continuous = "points") to mirror
# "blank" to turn off
upper = "blank",
# What to include below diagonal
lower = list(continuous = "points"),
# What to include in the diagonal
diag = list(continuous = "density"),
# How to label inner plots
# internal, none, show
axisLabels = "none",
# Other aes() parameters
colour = "Species",
title = "Iris Scatterplot Matrix"
)
# Remove grid from plots along diagonal
for (i in 1:4) {
# Get plot out of matrix
inner = getPlot(p, i, i);
# Add any ggplot2 settings you want
inner = inner + theme(panel.grid = element_blank());
# Put it back into the matrix
p <- putPlot(p, inner, i, i);
}
# Show the plot
print(p)
head(df)
library(GGally)
data(iris)
data(iris)
p <- ggpairs(iris,
# Columns to include in the matrix
columns = 1:4,
# What to include above diagonal
# list(continuous = "points") to mirror
# "blank" to turn off
upper = "blank",
# What to include below diagonal
lower = list(continuous = "points"),
# What to include in the diagonal
diag = list(continuous = "density"),
# How to label inner plots
# internal, none, show
axisLabels = "none",
# Other aes() parameters
colour = "Species",
title = "Iris Scatterplot Matrix"
)
p
head(iris)
for (i in 1:4) {
# Get plot out of matrix
inner = getPlot(p, i, i);
# Add any ggplot2 settings you want
inner = inner + theme(panel.grid = element_blank());
# Put it back into the matrix
p <- putPlot(p, inner, i, i);
}
p
data(iris)
# Generate basic parallel coordinate plot
p <- ggparcoord(data = iris,
# Which columns to use in the plot
columns = 1:4,
# Which column to use for coloring data
groupColumn = 5,
# Allows order of vertical bars to be modified
order = "anyClass",
# Do not show points
showPoints = FALSE,
# Turn on alpha blending for dense plots
alphaLines = 0.6,
# Turn off box shading range
shadeBox = NULL,
# Will normalize each column's values to [0, 1]
scale = "uniminmax" # try "std" also
)
p
# Start with a basic theme
p <- p + theme_minimal()
# Decrease amount of margin around x, y values
p <- p + scale_y_continuous(expand = c(0.02, 0.02))
p <- p + scale_x_discrete(expand = c(0.02, 0.02))
# Remove axis ticks and labels
p <- p + theme(axis.ticks = element_blank())
p <- p + theme(axis.title = element_blank())
p <- p + theme(axis.text.y = element_blank())
# Clear axis lines
p <- p + theme(panel.grid.minor = element_blank())
p <- p + theme(panel.grid.major.y = element_blank())
# Darken vertical lines
p <- p + theme(panel.grid.major.x = element_line(color = "#bbbbbb"))
# Move label to bottom
p <- p + theme(legend.position = "bottom")
# Figure out y-axis range after GGally scales the data
min_y <- min(p$data$value)
max_y <- max(p$data$value)
pad_y <- (max_y - min_y) * 0.1
# Calculate label positions for each veritcal bar
lab_x <- rep(1:4, times = 2) # 2 times, 1 for min 1 for max
lab_y <- rep(c(min_y - pad_y, max_y + pad_y), each = 4)
# Get min and max values from original dataset
lab_z <- c(sapply(iris[, 1:4], min), sapply(iris[, 1:4], max))
# Convert to character for use as labels
lab_z <- as.character(lab_z)
# Add labels to plot
p <- p + annotate("text", x = lab_x, y = lab_y, label = lab_z, size = 3)
p
library(Mass)
library(mass)
library(MASS)
read.csv(file.choose(),sep=",",header=TRUE)
data<-read.csv(file.choose(),sep=",",header=TRUE)
head(data)
data
head(data)
myFit <-lda(Origin~Freshwater+Marine, data=data, CV=TRUE)
myFit
help(lda)
myFit <-lda(Origin~Freshwater+Marine, data=data)
plot(myFit)
myFit.gender <- lda(Gender~Freshwater+Marine, data=data)
plot(myFit.gender)
myFit.gender <- lda(Gender~Freshwater+Marine, data=data, CV=TRUE)
myQDA <- qda (Origin~Freshwater+Marine, data=data, prior=c(0.4, 0.6))
myQDA
plot(myQDA)
install.packages('klaR')
partimat(Origin~Freshwater+Marine, data=data, method=QDA)
library(klaR)
partimat(Origin~Freshwater+Marine, data=data, method=QDA)
?partimat
partimat(Origin~Freshwater+Marine, data=data, method=QDA)
partimat(Origin~Freshwater+Marine, data=data, method='qda')
partimat(Origin~Freshwater+Marine, data=data, method='lda')
help(factanal)
0.744**2+(-0.410)**2+(-0.020)**2
0.698**2+0.153**2+0.084**2
1-0.517669
mydata<-myread.csv(file.choose(),sep=",",header=TRUE)
mydata<-read.csv(file.choose(),sep=",",header=TRUE)
head(mydata)
myData.new<-mydata[,-1]
head(myData.new)
library("psych", lib.loc="C:/Users/yh/Documents/R/win-library/3.0")
help(factor.pa)
help(varimax)
myData.new
head(myData.ne)w
head(myData.new)
help(principal)
principal(r=myData.new, nfactors=3, rotate='varimax')
cor(myData.new)
mydata<-read.csv(file.choose(),sep=",",header=TRUE)
myData.new<-mydata[,-1]
mycor<-cor(myData.new)
principal(r=mycor, nfactors=3, rotate='varimax')
mydata<-read.csv(file.choose(),sep=",",header=TRUE)
myData.new<-mydata[,-1]
mycor<-cor(myData.new)
my.prin<-principal(r=mycor, nfactors=3, rotate='varimax')
names(my.prin)
my.prin$values
my.prin$rotation
my.prin$loadings
varimax()
varimax
help(varimax)
myData.new<-mydata[,-1]
mycor<-cor(myData.new)
mycor.new<-varimax(mycor, normalize=FALSE)
factor.pa(r=mycor.new)
mycor.new
factor.pa(r=mycor.new, nfactors=3)
help(factor.pa)
factor(r=mycor.new)
fa(r=mycor)
fa(r=mycor, nfactors=3, rotate='varimax')
help(factanal)
factanal(x=mycor, factors=3, data=myData.new, rotate='varimax')
factanal(x=mycor, factors=3, rotate='varimax')
factanal(x=myData.new, factors=3, rotate='varimax')
myData.new
head(myData.new)
factanal(x=myData.new, factors=3, rotate='varimax')
type(myData.new)
typeof(myData.new)
myData.new<-data.frame(mydata[,-1])
factanal(x=myData.new, factors=3, rotate='varimax')
myData.new<-data.frame(mydata[,-1])
mycor<-cor(myData.new)
mycor.new<-varimax(mycor, normalize=FALSE)
fa(r=mycor, nfactors=3, rotate='varimax')
help(principal)
fa(r=mycor.new, nfactors=3, rotate='varimax')
fa(r=mycor.new, nfactors=3, rotate='varimax')
mycor.new
fa(r=mycor.new$rotmat, nfactors=3, rotate='varimax')
fa(r=mycor.new$rotmat, nfactors=3, rotate='varimax')
mycor.new$rotmat
fa(r=as.matrix(mycor.new$rotmat), nfactors=3, rotate='varimax')
fa(r=as.matrix(mycor.new$rotmat), nfactors=3), #
fa(r=as.matrix(mycor), nfactors=3,rotate='varimax')
fa(r=mycor.new, nfactors=3)
mycor.new
fa(r=mycor.new$rotmat, nfactors=3)
0.7474**2+(-0.410)**2+(-0.020)**2
1-((0.698**2)+(0.153)**2+(0.084)882)
1-((0.698**2)+(0.153)**2+(0.084)**2)
x1 <- c(2.35, -5.02, -8.71, -3.73, -4.05, -4.0)
x2 <- c(5.15, 3.82, 2.12)
mean(x1)
sd(x1)
mean(x2)
sd(x2)
-63/2-99/2
X<-c(2,3/2,3/2,4)
X<-matrix(X, ncol=2)
inv(X)
X<-c(2,3/2,3/2,4)
X<-matrix(X, ncol=2)
inverse(X)
X<-c(2,3/2,3/2,4)
X<-matrix(X, ncol=2)
X^-1
ln(13/7)
log(13/7)
X<-c(2,3/2,3/2,4)
X<-matrix(X, ncol=2)
solve(X)
16/23
1/2*X_mean%*%solve(X)%*%X2_mean
X<-c(2,3/2,3/2,4)
X<-matrix(X, ncol=2)
solve(X)
X_mean=c(-3,-3)
X_mean=matrix(X_mean, ncol=1)
X2_mean=c(3,3)
X2_mean=matrix(X2_mean, ncol=2)
1/2*X_mean%*%solve(X)%*%X2_mean
X_mean
X2_mean=matrix(X2_mean, ncol=2)
X2_mean
1/2*X_mean*solve(X)*X2_mean
X<-c(2,3/2,3/2,4)
X<-matrix(X, ncol=2)
solve(X)
X_mean=c(-3,-3)
X_mean=matrix(X_mean, ncol=2)
X2_mean=c(3,3)
X<-c(2,3/2,3/2,4)
X<-matrix(X, ncol=2)
solve(X)
X_mean=c(-3,-3)
X_mean=matrix(X_mean, ncol=2)
X2_mean=c(3,3)
X2_mean=matrix(X2_mean, ncol=1)
1/2*X_mean*solve(X)*X2_mean
1/2*X_mean%*%solve(X)%*%X2_mean
X<-c(2,3/2,3/2,4)
X<-matrix(X, ncol=2)
solve(X)
X_mean=c(-3,-3)
X_mean=matrix(X_mean, ncol=1)
X2_mean=c(3,3)
X2_mean=matrix(X2_mean, ncol=2)
1/2*X_mean%*%solve(X)%*%X2_mean
X<-c(2,3/2,3/2,4)
X<-matrix(X, ncol=2)
solve(X)
X_mean=c(-3,-3)
X_mean=matrix(X_mean, ncol=1)
X2_mean=c(3,3)
X2_mean=matrix(X2_mean, ncol=2)
1/2*X_mean%*%solve(X)%*%X2_mean
X<-c(2,3/2,3/2,4)
X<-matrix(X, ncol=2)
solve(X)
X_mean=c(-3,-3)
X_mean=matrix(X_mean, ncol=2)
X2_mean=c(3,3)
X2_mean=matrix(X2_mean, ncol=1)
1/2*X_mean%*%solve(X)%*%X2_mean
log(0.35/0.65) + 2.347826
X<-c(2,3/2,3/2,4)
X<-matrix(X, ncol=2)
solve(X)
X_mean=c(-3,-3)
X_mean=matrix(X_mean, ncol=2)
X2_mean=c(1,2)
X2_mean=matrix(X2_mean, ncol=1)
1/2*X_mean%*%solve(X)%*%X2_mean
log(.4/0.6)
s1<-c(1.7,0,0,1.6) s1<-matrix(s1, ncol=2) solve(s1)
s1<-c(1.7,0,0,1.6)
s1<-matrix(s1, ncol=2)
solve(s1)
s2<-c(2.0, -1/3, -1/3, 1.8)
s2<-matrix(s2, ncol=2)
solve(s2)
1/2*log((1.7*1.6)/(2*1.8-1/3^2))
u1 <- c(-0.4, -0.2)
u1 <-matrix(u1, ncol=1)
u2 <- c(0.75, 0.40)
u2 <- matrix(u2, ncol=1)
1/2*log((1.7*1.6)/(2*1.8-1/3^2))+1/2*(u1*solve(s1)*t(u1) - u2*solve(s2)*t(u2))
u1 <- c(-0.4, -0.2)
u1 <-matrix(u1, ncol=2)
u2 <- c(0.75, 0.40)
u2 <- matrix(u2, ncol=2)
1/2*log((1.7*1.6)/(2*1.8-1/3^2))+1/2*(u1*solve(s1)*t(u1) - u2*solve(s2)*t(u2))
u1*solve(s1)*t(u1)
t(u1)
u1 <- c(-0.4, -0.2)
u1 <-matrix(u1, ncol=1)
u1*solve(s1)*t(u1)
u1%*%solve(s1)%*%t(u1)
u1 <- c(-0.4, -0.2)
u1 <-matrix(u1, ncol=2)
u1%*%solve(s1)%*%t(u1)
u1 <- c(-0.4, -0.2)
u1 <-matrix(u1, ncol=2)
u2 <- c(0.75, 0.40)
u2 <- matrix(u2, ncol=2)
1/2*log((1.7*1.6)/(2*1.8-1/3^2))+1/2*(u1%*%solve(s1)%*%t(u1) - u2%*%solve(s2)%*%t(u2))
shiny::runGitHub("msan622", "heyi87", subdir = "project-prototype")
shiny::runGitHub("msan622", "heyi87", subdir = "project-prototype")
setwd('C:/Users/yh/Desktop/DataVisualization/Project')
loadData <- function(){
red.wine<-read.csv('winequality-red.csv',sep=";",header=TRUE)
quality.type <- rep(NA, nrow(red.wine))
quality <- red.wine$quality
quality.type[which(quality ==3)] = "Low"
quality.type[which(quality ==4)] = "Low"
quality.type[which(quality ==5)] = "Medium"
quality.type[which(quality ==6)] = "Medium"
quality.type[which(quality ==7)] = "High"
quality.type[which(quality ==8)] = "High"
red.wine$quality <- as.factor(quality.type)
red.wine <- red.wine[rowSums(is.na(red.wine)) != ncol(red.wine),]
return (red.wine)
}
data<-loadData()
head(data)
model <- randomForest(quality ~., data=data.new, importance=TRUE)
library(randomForest)
model <- randomForest(quality ~., data=data.new, importance=TRUE)
model <- randomForest(quality ~., data=data, importance=TRUE)
model
summary(model)
paste(model)
model
attributes(model)
capture.output(model)
text<-capture.output(model)
text
