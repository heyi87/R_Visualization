predict
s=store1.dept1.ts+predic
s=store1.dept1.ts+predict
store1.dept1.ts
predict
store1.dept1.ts
predict
names(store1.dept1.ts)
store1.dept1.ts[1]
predict[1]
predict[1:2]
as.numeric(predict)
predict
typeof(predict)
length(predict)
length(predict[1])
length(predict[2])
predict[2]
predict[1]
predict<-predict(fit,n.ahead=39)
predict
predict$pred
as.numeric(predict$pred)
s=store1.d
s=store1.dept1.ts+as.numeric(predict$pred)
store1.dept1.ts
as.numeric(predict$pred)
x=store1.dept1.ts
y=as.numeric(predict$pred)
s=lapply(1:min(length(x),length(y),function(i) unlist(x[i])+unlist(y[i]))
)
s=lapply(1:min(length(x),length(y),function(i) unlist(x[i])+unlist(y[i])))
mapply(c, x, y, SIMPLIFY=FALSE)
plot(y)
AIClist
data<- read.csv(file.choose(), sep = ',', header = TRUE)
heac(data)
head(data)
store1.dept1=subset(data, data$Store == 1 & data$Dept==1)
store1.dept1.ts=ts(store1.dept1$Weekly_Sales)
plot(store1.dept1.ts)
acf(store1.dept1.ts)
length(store1.dept1.ts)
read.csv(file.choose(),sep=",",header=TRUE)
head(data)
data<-read.csv(file.choose(),sep=",",header=TRUE)
data<-read.csv(file.choose(),sep=",",header=TRUE)
head(data)
head(data)
View(data)
library(randomForest)
help(randomForest)
head(data)
names(data)
help (randomForest(formula,)
)
help (randomForest)
library(ggplot2)
data(movies)
data(EuStockMarkets)
head(movies)
movies<-subset(movies, movies$budget>0)
#Author: Yi He for MSAN-622 for Homework 1
#This script will output four plots to answer each of the questions in Homework 1
library(ggplot2)
data(movies)
data(EuStockMarkets)
movies<-subset(movies, movies$budget>0)
genre <- rep(NA, nrow(movies))
count <- rowSums(movies[, 18:24])
genre[which(count > 1)] = "Mixed"
genre[which(count < 1)] = "None"
genre[which(count == 1 & movies$Action == 1)] = "Action"
genre[which(count == 1 & movies$Animation == 1)] = "Animation"
genre[which(count == 1 & movies$Comedy == 1)] = "Comedy"
genre[which(count == 1 & movies$Drama == 1)] = "Drama"
genre[which(count == 1 & movies$Documentary == 1)] = "Documentary"
genre[which(count == 1 & movies$Romance == 1)] = "Romance"
genre[which(count == 1 & movies$Short == 1)] = "Short"
movies<-cbind(movies, genre)
eu <- transform(data.frame(EuStockMarkets), time = time(EuStockMarkets))
yiHomework1 <- function(){
### Question 1
question1Plot <- ggplot (movies, aes(x=budget, y=rating))+
geom_point(size=1, color='red')+
geom_smooth(method=lm, se=FALSE)+
ggtitle('Movie Rating vs. Movie Budget')+
xlab('Movie Budget')+
ylab('Movie Ratig')
question1Plot
ggsave(filename='hw1-scatter.png')
###Question 2
question2Plot<-ggplot(movies, aes(factor(genre),fill=genre))+
geom_bar()+
ggtitle('Movie Genre vs. Movie Count')+
xlab('Movie Genre')+
ylab('Movie Count')
question2Plot
ggsave(filename='hw1-bar.png')
###Question 3
question3Plot<-ggplot(movies, aes(x=budget, y=rating, group=factor(genre), color=factor(genre)))+
geom_point(size=2)+
geom_smooth(method=lm, se=FALSE)+
facet_wrap(~genre)+
ggtitle('Movie Rating vs. Movie Budget by Genre')+
xlab('Movie Budget')+
ylab('Movie Rating')
question3Plot
ggsave(filename='hw1-multiples.png')
###Question 4
question4Plot <-ggplot()+
geom_line(data=eu,aes(x=time, y=eu$DAX,  color='DAX'))+
geom_line(data=eu,aes(x=time, y=eu$SMI, color='SMI'))+
geom_line(data=eu,aes(x=time, y=eu$CAC, color='CAC'))+
geom_line(data=eu,aes(x=time, y=eu$FTSE,  color='FTSE'))+
theme(legend.title=element_blank())+
ggtitle('EU Index Moving Average')+
xlab('Time')+
ylab('Index Value')
question4Plot
ggsave(filename='hw1-multiline.png')
}
yiHomework1()
6/7
2**2
2/(5**0.5*2**0.5)
install.packages("bayesm")
library(bayesm)
X=matrix(rnorm(200,4),ncol=2)
x
X
head(x)
head(X)
[5,2]
(5,2)
c(5,2)
source('~/.active-rstudio-document', echo=TRUE)
X=matrix(c(5,2),c(2,2), ncol=2)
X
X=data.frame(x=c(5,2), y=c(2,2))
X=matrix(X, ncol=2)
X
X=data.frame(x=c(5,2), y=c(2,2))
X
X=matrix(X)
X
matrix((2,3),(3,2))
matrix(c(2,3),c(3,2))
X<-c(5,2,2,2)
X=matrix(X, ncol=2)
X
var(X)
X
nmat(as.vector(X))
.4**2
1-.16
help(solve)
.6**2-2*.6-0.84
.4**2
help(rootsolve)
help(roots)
help(root)
help(rootSolve)
help(rootsSolve)
.837*2
X<-c(1,.4,1,.4)
X=matrix(X, ncol=2)
X
eigen(X)
X<-c(1,.4,.4,1)
X=matrix(X, ncol=2)
eigen(X)
X
X<-c(1,.6324,.6324,1)
X=matrix(X, ncol=2)
eigen(X)
1.63224/(1.63224+0.3676)
0.707*1.632**2
-0.707*0.3676**2
Y=c(2,0,0,0,4,0,0,0,4)
Y=matrix(Y, ncol=3)
eigen(Y)
help(barlett.test)
help(bartlett.test)
help(princomp)
library(ggplot2)
library(ggplot2)
library(grid)
data("iris")
# Sort bubble plot so smaller colors are displayed last
# on top of the bigger colors
df <- iris
df <- df[order(df$Petal.Length, decreasing = TRUE),]
# Create bubble plot
p <- ggplot(df, aes(
x = Sepal.Length,
y = Sepal.Width,
color = Species,
size = Petal.Length))
# Give points some alpha to help with overlap/density
# Can also "jitter" to reduce overlap but reduce accuracy
p <- p + geom_point(alpha = 0.6, position = "jitter")
# Default size scale is by radius, force to scale by area instead
# Optionally disable legends
p <- p + scale_size_area(max_size = 10, guide = "none")
# p <- p + scale_color_discrete(guide = "none")
# Tweak the plot limits
p <- p + scale_x_continuous(
limits = c(3, 9),
expand = c(0, 0))
p <- p + scale_y_continuous(
limits = c(1, 5),
expand = c(0, 0))
# Make the grid square
p <- p + coord_fixed(ratio = 1)
# Modify the labels
p <- p + ggtitle("Iris Dataset")
p <- p + labs(
size = "Petal Length",
x = "Sepal Length",
y = "Sepal Width")
# Modify the legend settings
p <- p + theme(legend.title = element_blank())
p <- p + theme(legend.direction = "horizontal")
p <- p + theme(legend.position = c(0, 0))
p <- p + theme(legend.justification = c(0, 0))
p <- p + theme(legend.background = element_blank())
p <- p + theme(legend.key = element_blank())
p <- p + theme(legend.text = element_text(size = 12))
p <- p + theme(legend.margin = unit(0, "pt"))
# Force the dots to plot larger in legend
p <- p + guides(colour = guide_legend(override.aes = list(size = 8)))
# Indicate size is petal length
p <- p + annotate(
"text", x = 6, y = 4.8,
hjust = 0.5, color = "grey40",
label = "Circle area is proportional to petal length.")
print(p)
library(shiny)
shiny::runGitHub('msan622', 'manoj-v', subdir='homework2')
shiny::runGitHub('msan622', 'katherinez22', subdir = 'homework2')
shiny::runGitHub('msan622', 'katherinez22', subdir = 'homework2')
library(shiny)
shiny::runGitHub('msan622', 'manoj-v', subdir='homework2')
df <- iris
df$id <- rownames(df)
df$id
df
head(df)
rownames(df)
df$variable
levels(df$Species)  <- sapply(levels(df$Species), niceLabels)
levels(df$variable) <- sapply(levels(df$variable), niceLabels)
niceLabels <- function(text) {
text <- gsub("\\.", " ", text)
text <- paste(
toupper(substr(text, 1, 1)),
substring(text, 2),
sep = "",
collapse = "")
return(text);
}
levels(df$Species)  <- sapply(levels(df$Species), niceLabels)
levels(df$variable) <- sapply(levels(df$variable), niceLabels)
df$variable
(df$Species)
library(ggplot2)
library(grid)
data("iris")
# Sort bubble plot so smaller colors are displayed last
# on top of the bigger colors
df <- iris
df <- df[order(df$Petal.Length, decreasing = TRUE),]
p <- ggplot(df, aes(
x = Sepal.Length,
y = Sepal.Width,
color = Species,
size = Petal.Length))
p
p <- p + geom_point(alpha = 0.6, position = "jitter")
p
# SCATTERPLOT MATRIX: IRIS DATASET
# http://www.inside-r.org/packages/cran/GGally/docs/ggpairs
# Load required packages
require(GGally)
# Load datasets
data(iris)
# Create scatterplot matrix
p <- ggpairs(iris,
# Columns to include in the matrix
columns = 1:4,
# What to include above diagonal
# list(continuous = "points") to mirror
# "blank" to turn off
upper = "blank",
# What to include below diagonal
lower = list(continuous = "points"),
# What to include in the diagonal
diag = list(continuous = "density"),
# How to label inner plots
# internal, none, show
axisLabels = "none",
# Other aes() parameters
colour = "Species",
title = "Iris Scatterplot Matrix"
)
# Remove grid from plots along diagonal
for (i in 1:4) {
# Get plot out of matrix
inner = getPlot(p, i, i);
# Add any ggplot2 settings you want
inner = inner + theme(panel.grid = element_blank());
# Put it back into the matrix
p <- putPlot(p, inner, i, i);
}
# Show the plot
print(p)
require(GGally)
install.packages("GGally")
# SCATTERPLOT MATRIX: IRIS DATASET
# http://www.inside-r.org/packages/cran/GGally/docs/ggpairs
# Load required packages
library(GGally)
# Load datasets
data(iris)
# Create scatterplot matrix
p <- ggpairs(iris,
# Columns to include in the matrix
columns = 1:4,
# What to include above diagonal
# list(continuous = "points") to mirror
# "blank" to turn off
upper = "blank",
# What to include below diagonal
lower = list(continuous = "points"),
# What to include in the diagonal
diag = list(continuous = "density"),
# How to label inner plots
# internal, none, show
axisLabels = "none",
# Other aes() parameters
colour = "Species",
title = "Iris Scatterplot Matrix"
)
# Remove grid from plots along diagonal
for (i in 1:4) {
# Get plot out of matrix
inner = getPlot(p, i, i);
# Add any ggplot2 settings you want
inner = inner + theme(panel.grid = element_blank());
# Put it back into the matrix
p <- putPlot(p, inner, i, i);
}
# Show the plot
print(p)
head(df)
library(GGally)
data(iris)
data(iris)
p <- ggpairs(iris,
# Columns to include in the matrix
columns = 1:4,
# What to include above diagonal
# list(continuous = "points") to mirror
# "blank" to turn off
upper = "blank",
# What to include below diagonal
lower = list(continuous = "points"),
# What to include in the diagonal
diag = list(continuous = "density"),
# How to label inner plots
# internal, none, show
axisLabels = "none",
# Other aes() parameters
colour = "Species",
title = "Iris Scatterplot Matrix"
)
p
head(iris)
for (i in 1:4) {
# Get plot out of matrix
inner = getPlot(p, i, i);
# Add any ggplot2 settings you want
inner = inner + theme(panel.grid = element_blank());
# Put it back into the matrix
p <- putPlot(p, inner, i, i);
}
p
data(iris)
# Generate basic parallel coordinate plot
p <- ggparcoord(data = iris,
# Which columns to use in the plot
columns = 1:4,
# Which column to use for coloring data
groupColumn = 5,
# Allows order of vertical bars to be modified
order = "anyClass",
# Do not show points
showPoints = FALSE,
# Turn on alpha blending for dense plots
alphaLines = 0.6,
# Turn off box shading range
shadeBox = NULL,
# Will normalize each column's values to [0, 1]
scale = "uniminmax" # try "std" also
)
p
# Start with a basic theme
p <- p + theme_minimal()
# Decrease amount of margin around x, y values
p <- p + scale_y_continuous(expand = c(0.02, 0.02))
p <- p + scale_x_discrete(expand = c(0.02, 0.02))
# Remove axis ticks and labels
p <- p + theme(axis.ticks = element_blank())
p <- p + theme(axis.title = element_blank())
p <- p + theme(axis.text.y = element_blank())
# Clear axis lines
p <- p + theme(panel.grid.minor = element_blank())
p <- p + theme(panel.grid.major.y = element_blank())
# Darken vertical lines
p <- p + theme(panel.grid.major.x = element_line(color = "#bbbbbb"))
# Move label to bottom
p <- p + theme(legend.position = "bottom")
# Figure out y-axis range after GGally scales the data
min_y <- min(p$data$value)
max_y <- max(p$data$value)
pad_y <- (max_y - min_y) * 0.1
# Calculate label positions for each veritcal bar
lab_x <- rep(1:4, times = 2) # 2 times, 1 for min 1 for max
lab_y <- rep(c(min_y - pad_y, max_y + pad_y), each = 4)
# Get min and max values from original dataset
lab_z <- c(sapply(iris[, 1:4], min), sapply(iris[, 1:4], max))
# Convert to character for use as labels
lab_z <- as.character(lab_z)
# Add labels to plot
p <- p + annotate("text", x = lab_x, y = lab_y, label = lab_z, size = 3)
p
setwd('C:/Users/yh/Documents/GitHub/msan622/homework3')
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
globalData
globalData<-loadData()
loadData <- function(){
df <- data.frame(state.x77,
State = state.name,
Abbrev = state.abb,
Region = state.region,
Division = state.division)
return (df)
}
globalData<-loadData()
min(globalData$Population)
max(globalData$Population)
min(globalData$Income)
max(globalData$Income)
max(globalData$Income)
runApp()
50*.75
50*.75
runApp()
runApp()
runApp()
globalData
head(globalData, nrow=20)
head(globalData, nrow=26)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
head(globalData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd('C:\Users\yh\Documents\GitHub\msan622\homework3')
setwd('C:/Users/yh/Documents/GitHub/msan622/homework3')
runApp()
