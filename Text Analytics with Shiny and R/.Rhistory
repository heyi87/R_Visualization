sotu_corpus,
stemDocument,
lang='english')
sotu_corpus <- tm_map(
sotu_corpus,
stripWhitespace)
sotu_tdm <- TermDocumentMatrix(sotu_corpus)
sotu_matrix <- as.matrix(sotu_tdm)
sotu_df <- data.frame(
Terms=sotu_tdm$dimnames$Terms,
OliverTwist=sotu_matrix[,1],
TaleOfTowCities=sotu_matrix[,2],
stringsAsFactors = FALSE)
sotu_df <- sotu_df[with(
sotu_df,
order(OliverTwist, decreasing = TRUE)), ]
View(sotu_df)
head(sotu_df)
names(sotu_df)
sotu_dfOT<-sotu_df
sotu_dfTT<-sotu_df
#create two dataframe for each text and arrange each by frequency
sotu_df <- sotu_dfOT[with(
sotu_dfOT,
order(OliverTwist, decreasing = TRUE)), ]
OliverTwist<-sotu_dfOT$Terms
sotu_df <- sotu_dfTT[with(
sotu_dfTT,
order(TaleOfTowCities, decreasing = TRUE)), ]
TaleOfTowCities<- sotu_dfTT$Terms
sotu_df.final<-data.frame(TaleOfTwoCities=TaleOfTowCities, OliverTwist=OliverTwist)
View(sotu_df.final)
require(tm)        # corpus
require(SnowballC) # stemming
sotu_source<-DirSource(
directory=file.path("data"),
encoding = "UTF-8",
pattern="*.txt",
recursive = FALSE,
ignore.case=FALSE)
sotu_corpus <- Corpus(
sotu_source,
readerControl = list(
reader=readPlain,
language='en'))
sotu_corpus <- tm_map(sotu_corpus, tolower)
sotu_corpus <- tm_map (
sotu_corpus,
removePunctuation,
preserve_intra_word_dashes=TRUE)
sotu_corpus <- tm_map(
sotu_corpus,
removeWords,
stopwords('english'))
sotu_corpus <- tm_map(
sotu_corpus,
stemDocument,
lang='english')
sotu_corpus <- tm_map(
sotu_corpus,
stripWhitespace)
sotu_tdm <- TermDocumentMatrix(sotu_corpus)
sotu_matrix <- as.matrix(sotu_tdm)
sotu_df <- data.frame(
Terms=sotu_tdm$dimnames$Terms,
OliverTwist=sotu_matrix[,1],
TaleOfTowCities=sotu_matrix[,2],
stringsAsFactors = FALSE)
sotu_dfOT<-sotu_df
sotu_dfTT<-sotu_df
#create two dataframe for each text and arrange each by frequency
sotu_dfOT <- sotu_df[with(
sotu_df,
order(OliverTwist, decreasing = TRUE)), ]
OliverTwist<-sotu_dfOT$Terms
sotu_dfTT <- sotu_df[with(
sotu_df,
order(TaleOfTowCities, decreasing = TRUE)), ]
TaleOfTowCities<- sotu_dfTT$Terms
sotu_df.final<-data.frame(TaleOfTwoCities=TaleOfTowCities, OliverTwist=OliverTwist)
View(sotu_df.final)
sotu_df.final)
comparison.cloud(sotu_df.final)
sotu_df.final
sotu_df
head(sotu_df)
sotu_df<-sotu_df[,-1]
View(sotu_df)
comparison.cloud(sotu_df)
comparison.cloud(sotu_df, max.words=20)
comparison.cloud(sotu_df, max.words=40)
comparison.cloud(sotu_df, max.words=40, random.order=FALSE, title.size=5)
comparison.cloud(sotu_df, max.words=40, random.order=FALSE, title.size=1)
comparison.cloud(sotu_df, max.words=100, random.order=FALSE, title.size=1)
require(tm)        # corpus
require(SnowballC) # stemming
sotu_source<-DirSource(
directory=file.path("data"),
encoding = "UTF-8",
pattern="*.txt",
recursive = FALSE,
ignore.case=FALSE)
sotu_corpus <- Corpus(
sotu_source,
readerControl = list(
reader=readPlain,
language='en'))
sotu_corpus <- tm_map(sotu_corpus, tolower)
sotu_corpus <- tm_map (
sotu_corpus,
removePunctuation,
preserve_intra_word_dashes=TRUE)
sotu_corpus <- tm_map(
sotu_corpus,
removeWords,
stopwords('english'))
sotu_corpus <- tm_map(
sotu_corpus,
stemDocument,
lang='english')
sotu_corpus <- tm_map(
sotu_corpus,
stripWhitespace)
sotu_tdm <- TermDocumentMatrix(sotu_corpus)
sotu_matrix <- as.matrix(sotu_tdm)
sotu_df <- data.frame(
Terms=sotu_tdm$dimnames$Terms,
OliverTwist=sotu_matrix[,1],
TaleOfTowCities=sotu_matrix[,2],
stringsAsFactors = FALSE)
View(sotu_df)
sotu_matrix
head(sodu_matrix)
head(sotu_matrix)
names(sotu_matrix)
data.frame(sotu_matrix)
sotu_df.heatmap<-data.frame(sotu_matrix)
head(sotu_df.heatmap)
require(reshape2)
data(UKLungDeaths)
View(UKLungDeaths)
data(UKLungDeaths)
UKLungDeaths
UKLungDeaths
data<-data(UKLungDeaths)
data
data(UKLungDeaths)
help(data)
times <- time(ldeaths)
View(times)
cycle(times)
month.abb
help(melt)
require(reshape2)
data(UKLungDeaths)
times <- time(ldeaths)
View(times)
years<-floor(times)
years <- factor(years, ordered=TRUE)
cycle(times)
month.abb
months <- factor(month.abb[cycle(times)], levels=month.abb, ordered=TRUE)
deaths <- data.frame(year=years, month=months, time=as.numeric(times), total=as.numeric(ldeaths),
male = as.numeric(mdeaths), females= as.numeric(fdeaths))
molten <- melt(
deaths,
id=c('year', 'month', 'time'))
require(ggplot2)
p<-ggplot(molten, aes(x=time, y=value))
p<-p+geom_line()
print(p)
View(molten)
p<-ggplot(molten, aes(x=time, y=value))
p<-p+geom_line(data=subset(molten, variale !='total')
aes(
group=variable,
color = variable,
fill = variable))
p<-ggplot(molten, aes(x=time, y=value))
p<-p+geom_line(data=subset(molten, variale !='total'),
aes(
group=variable,
color = variable,
fill = variable))
p<-ggplot(molten, aes(x=time, y=value))
p<-p+geom_line(data=subset(molten, variable !='total'),
aes(
group=variable,
color = variable,
fill = variable))
p
p<-ggplot(subset(molten,variable=='total'),
aes(x=month,
y=value,
group=year,
color=year
))
p <- p +geom_line(alpha=0.1
)
print (p)
data(UKLungDeaths)
times <- time(ldeaths)
View(times)
years<-floor(times)
years <- factor(years, ordered=TRUE)
cycle(times)
month.abb
months <- factor(month.abb[cycle(times)], levels=month.abb, ordered=TRUE)
deaths <- data.frame(year=years, month=months, time=as.numeric(times), total=as.numeric(ldeaths),
male = as.numeric(mdeaths), females= as.numeric(fdeaths))
molten <- melt(
deaths,
id=c('year', 'month', 'time'))
p<-ggplot(subset(molten,variable=='total'),
aes(x=month,
y=value,
group=year,
color=year
))##need to add the months or year to the data frame
p <- p +geom_line(alpha=0.1
)
View(molten)
p<-ggplot(subset(molten,variable=='total'),
aes(x=month,
y=value,
group=year,
color=year
))##need to add the months or year to the data frame
p <- p +geom_line(alpha=0.1
)
p<-ggplot(subset(molten,variable=='total'),
aes(x=month,
y=value,
group=year,
color=year
))##need to add the months or year to the data frame
p <- p +geom_line(alpha=1
)
p
p<-p+facet_wrap(~year, ncol=2)
p
p<-ggplot(subset(molten,variable=='total'),
aes(x=month,
y=value
))
p<-p+geom_tile(
aes(fill=value),
color='white'
)
print (p)
p<-ggplot(subset(molten,variable=='total'),
aes(x=month,
y=value
))
p<-p+geom_tile(
aes(fill=value)  )
print (p)
p<-ggplot(subset(molten,variable=='total'),
aes(x=month,
y=year
))
p<-p+geom_tile(
aes(fill=value)  )
print (p)
p<- p + coord_polar()
p
setwd('C:/Users/yh/Documents/GitHub/msan622/homework4')
sotu_tdm <- TermDocumentMatrix(sotu_corpus)
require(tm)        # corpus
require(SnowballC) # stemming
sotu_source<-DirSource(
directory=file.path("data"),
encoding = "UTF-8",
pattern="*.txt",
recursive = FALSE,
ignore.case=FALSE)
sotu_corpus <- Corpus(
sotu_source,
readerControl = list(
reader=readPlain,
language='en'))
sotu_corpus <- tm_map(sotu_corpus, tolower)
sotu_corpus <- tm_map (
sotu_corpus,
removePunctuation,
preserve_intra_word_dashes=TRUE)
sotu_corpus <- tm_map(
sotu_corpus,
removeWords,
stopwords('english'))
sotu_corpus <- tm_map(
sotu_corpus,
stemDocument,
lang='english')
sotu_corpus <- tm_map(
sotu_corpus,
stripWhitespace)
sotu_tdm <- TermDocumentMatrix(sotu_corpus)
sotu_matrix <- as.matrix(sotu_tdm)
View(sotu_matrix)
sotu_df <- data.frame(sotu_matrix)
View(sotu_df)
sotu_df.ranked <- sotu_df[with(
sotu_df,
order(TaleOfTowCities, decreasing = TRUE)), ]
View(sotu_df.ranked)
names(sotu_df)
sotu_df.ranked <- sotu_df[with(
sotu_df,
order(OliverTwist.txt, decreasing = TRUE)), ]
View(sotu_df.ranked)
sotu_df.ranked100 <- sotu_df[1:100,]
View(sotu_df.ranked100)
sotu_df.ranked100 <- sotu_df.ranked[1:100,]
View(sotu_df.ranked100)
View(sotu_df.ranked100)
molten <- melt(
sotu_df.ranked100,
id=c('row.names'))
names(sotu_df.ranked100)
names(sotu_df)
sotu_matrix
names(sotu_matrix)
names(sotu_tdm)
sotu_tdm$dimnames
head(sotu_tdm$dimnames)
names((sotu_tdm$dimnames))\
names(sotu_tdm$dimnames)
sotu_df <- data.frame(sotu_matrix, terms=sotu_tdm$dimnames$Terms)
head(sotu_df)
View(sotu_df)
sotu_df.ranked <- sotu_df[with(
sotu_df,
order(OliverTwist.txt, decreasing = TRUE)), ]
sotu_df.ranked100 <- sotu_df.ranked[1:100,]
View(sotu_df.ranked100)
names(sotu_df.ranked100)
molten <- melt(
sotu_df.ranked100,
id=c('terms'))
View(molten)
names(sotu_df.ranked100)
colnames(sotu_df.ranked100) <- c('Bleak House', 'David Copperfield', 'Great Expectation',
'Hard Times', 'Oliver Twist', 'Our Mutual Friend',
'Tale Of Two Cities', 'The Pickwick Papers', 'Terms')
names(sotu_df.ranked100)
molten <- melt(
sotu_df.ranked100,
id=c('Terms'))
p<-ggplot(subset(molten,variable=='value'),
aes(x=terms,
y=variable
))
p <- p + geom_tile(
aes(fill=value)  )
p
p<-ggplot(
aes(x=terms,
y=variable
))
p <- p + geom_tile(
aes(fill=value)  )
p<-ggplot(
aes(x=terms,
y=variable
))
View(molten)
p<-ggplot(Molten,
aes(x=Terms,
y=variable
))
p<-ggplot(molten,aes(x=Terms, y=variable))
p <- p + geom_tile(aes(fill=value)  )
p
sotu_tdm
sotu_df.ranked100 <- sotu_df.ranked[1:20,]
colnames(sotu_df.ranked100) <- c('Bleak House', 'David Copperfield', 'Great Expectation',
'Hard Times', 'Oliver Twist', 'Our Mutual Friend',
'Tale Of Two Cities', 'The Pickwick Papers', 'Terms')
molten <- melt(
sotu_df.ranked100,
id=c('Terms'))
##Create heat map
p<-ggplot(molten,aes(x=Terms, y=variable))
p <- p + geom_tile(aes(fill=value)  )
p
p <- p + theme_minimal()
p
p <- p + theme(axis.text.y = element_text(angle = 90, hjust = 0.5))
p
p<-ggplot(molten,aes(x=Terms, y=variable))
p <- p + geom_tile(aes(fill=value)  )
p <- p + theme_minimal()
# remove axis titles, tick marks, and grid
p <- p + theme(axis.title = element_blank())
p <- p + theme(axis.ticks = element_blank())
p <- p + theme(panel.grid = element_blank())
p
p<-ggplot(molten,aes(x=Terms, y=variable))
p <- p + geom_tile(aes(fill=value)  )
p <- p + theme_minimal()
# remove axis titles, tick marks, and grid
p <- p + theme(axis.title = element_blank())
p <- p + theme(axis.ticks = element_blank())
p <- p + theme(panel.grid = element_blank())
# remove legend (since data is scaled anyway)
p <- p + theme(legend.position = "none")
# remove padding around grey plot area
p <- p + scale_x_discrete(expand = c(0, 0))
p <- p + scale_y_discrete(expand = c(0, 0))
# optionally remove row labels (not useful depending on dataset)
p <- p + theme(axis.text.x = element_blank())
# get diverging color scale from colorbrewer
# #008837 is green, #7b3294 is purple
palette <- c("#008837", "#f7f7f7", "#f7f7f7", "#7b3294")
p <- p + scale_fill_gradient2(low = palette[1], mid = palette[2], high = palette[4], midpoint = midrange[1])
p
p<-ggplot(molten,aes(x=Terms, y=variable))
p <- p + geom_tile(aes(fill=value)  )
p <- p + theme_minimal()
# remove axis titles, tick marks, and grid
p <- p + theme(axis.title = element_blank())
p <- p + theme(axis.ticks = element_blank())
p <- p + theme(panel.grid = element_blank())
# remove legend (since data is scaled anyway)
p <- p + theme(legend.position = "none")
# remove padding around grey plot area
p <- p + scale_x_discrete(expand = c(0, 0))
p <- p + scale_y_discrete(expand = c(0, 0))
# optionally remove row labels (not useful depending on dataset)
p <- p + theme(axis.text.x = element_blank())
# get diverging color scale from colorbrewer
# #008837 is green, #7b3294 is purple
palette <- c("#008837", "#f7f7f7", "#f7f7f7", "#7b3294")
p <- p + scale_fill_gradient2(low = palette[1], mid = palette[2], high = palette[4], midpoint = palette[3])
p
p<-ggplot(molten,aes(x=Terms, y=variable))
p <- p + geom_tile(aes(fill=value)  )
p <- p + theme_minimal()
# remove axis titles, tick marks, and grid
p <- p + theme(axis.title = element_blank())
p <- p + theme(axis.ticks = element_blank())
p <- p + theme(panel.grid = element_blank())
# remove legend (since data is scaled anyway)
p <- p + theme(legend.position = "none")
# remove padding around grey plot area
p <- p + scale_x_discrete(expand = c(0, 0))
p <- p + scale_y_discrete(expand = c(0, 0))
# optionally remove row labels (not useful depending on dataset)
p <- p + theme(axis.text.x = element_blank())
# get diverging color scale from colorbrewer
# #008837 is green, #7b3294 is purple
palette <- c("#008837", "#f7f7f7", "#f7f7f7", "#7b3294")
p <- p + scale_fill_gradient2(low = palette[1], mid = palette[2], high = palette[3])
p
p<-ggplot(molten,aes(x=Terms, y=variable))
p <- p + geom_tile(aes(fill=value)  )
p <- p + theme_minimal()
# remove axis titles, tick marks, and grid
p <- p + theme(axis.title = element_blank())
p <- p + theme(axis.ticks = element_blank())
p <- p + theme(panel.grid = element_blank())
# remove legend (since data is scaled anyway)
p <- p + theme(legend.position = "none")
# remove padding around grey plot area
p <- p + scale_x_discrete(expand = c(0, 0))
p <- p + scale_y_discrete(expand = c(0, 0))
p<-p+scale_fill_brewer(palette = "PRGn")
p
p<-ggplot(molten,aes(x=Terms, y=variable))
p <- p + geom_tile(aes(fill=value)  )
p <- p + theme_minimal()
# remove axis titles, tick marks, and grid
p <- p + theme(axis.title = element_blank())
p <- p + theme(axis.ticks = element_blank())
p <- p + theme(panel.grid = element_blank())
# remove legend (since data is scaled anyway)
p <- p + theme(legend.position = "none")
# remove padding around grey plot area
p <- p + scale_x_discrete(expand = c(0, 0))
p <- p + scale_y_discrete(expand = c(0, 0))
p
p<-p+scale_fill_brewer(palette = 1)
p
p<-ggplot(molten,aes(x=Terms, y=variable))
p <- p + geom_tile(aes(fill=value)  )
p <- p + theme_minimal()
# remove axis titles, tick marks, and grid
p <- p + theme(axis.title = element_blank())
p <- p + theme(axis.ticks = element_blank())
p <- p + theme(panel.grid = element_blank())
# remove legend (since data is scaled anyway)
p <- p + theme(legend.position = "none")
# remove padding around grey plot area
p <- p + scale_x_discrete(expand = c(0, 0))
p <- p + scale_y_discrete(expand = c(0, 0))
p<-p+scale_fill_brewer(type='seq',palette = 1)
p
p<-ggplot(molten,aes(x=Terms, y=variable))
p <- p + geom_tile(aes(fill=value)  )
p <- p + theme_minimal()
# remove axis titles, tick marks, and grid
p <- p + theme(axis.title = element_blank())
p <- p + theme(axis.ticks = element_blank())
p <- p + theme(panel.grid = element_blank())
# remove legend (since data is scaled anyway)
p <- p + theme(legend.position = "none")
# remove padding around grey plot area
p <- p + scale_x_discrete(expand = c(0, 0))
p <- p + scale_y_discrete(expand = c(0, 0))
p<-p+scale_fill_brewer(palette = "Set1")
p
